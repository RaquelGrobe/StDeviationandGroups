package com.company;
import static com.company.ProjConstants.*;

public class StDeviation {

    private int[] Data = new int[MAXDATA];

    private int    sdItems       = INVALID;
    private int    sdMinRange    = INVALID_RANGE;
    private int    sdMaxRange    = INVALID_RANGE;
    private int    sdcalcMethod  = INVALID_CALC_METHOD;
    private int    sdNumOfGroups = INVALID;

    private double sdAve       = INVALID;
    private double sdVar       = INVALID;
    private double sdDev       = INVALID;

    public void setCalcMethod(int how2calculate){

        switch (how2calculate){
            case DISCRETE:{
                sdcalcMethod = how2calculate;
                break;
            }
            case FRQTABLE: {
                sdcalcMethod = how2calculate;
                break;
            }

            case GROUPED:{
                sdcalcMethod = how2calculate;
                break;
            }

            default:{
                sdcalcMethod = INVALID_CALC_METHOD;
                System.out.println("ERROR: Standard Deviation Calculation Method either UNIMPLEMENTED, or UNKNOWN");
                break;
            }
        }
    }

    public int getCalcMethod(){
        return sdcalcMethod;
    }

    public void setMin(int userMin){

        if ((userMin >= MINDATA) && (userMin < MAXDATA)){
            sdMinRange = userMin;
        }
        else{
            sdMinRange = INVALID_RANGE;
        }
    }

    public int getMin(){
        return sdMinRange;
    }

    public void setMax(int userMax){
        if ((userMax >= MINDATA) && (userMax < MAXDATA)){
            sdMaxRange = userMax;
        }
        else{
            sdMaxRange = INVALID_RANGE;
        }
    }

    public int getMax(){
        return sdMaxRange;
    }


    public void setNumberOfGroups(int groups){

        if ((groups > MINDATA) && (groups <= (sdMaxRange  - sdMinRange)) && (((sdMaxRange  - sdMinRange)+1) % groups == 0)) {
            sdNumOfGroups = groups;
        } else {
            sdNumOfGroups = INVALID;
        }
    }

    public int getNumberOfGroups(){
        return sdNumOfGroups;
    }

    public void addNewDataItem(int dataItem){

        if ((sdItems == INVALID)){
            sdItems = 0;
        }

        switch (getCalcMethod()){

            case DISCRETE:{

                Data[sdItems] = dataItem;
                sdItems++;
                break;
            }

            case FRQTABLE:
            case GROUPED:{

                if ((getMin() != INVALID_RANGE) && (getMax() != INVALID_RANGE)){

                    if ((dataItem < getMin())|| (dataItem > getMax())){

                        System.out.printf("ERROR: RANGE VIOLATION - Data Value ( %5.0f ), User Values: Minimum ( %5.0f ), Maxium ( %5.0f )\n",
                                (double) dataItem, (double) getMin(), (double) getMax());

                    }
                    else if ((dataItem < MINDATA) || (dataItem >= MAXDATA)){

                        System.out.printf("ERROR: RANGE VIOLATION - Data Value ( %5.0f ), System Values: DATAMIN ( %5.0f ), DATAMAX ( %5.0f )\n",
                                (double) dataItem, (double) MINDATA, (double) MAXDATA - 1);

                    }
                    else {

                        Data[dataItem] = Data[dataItem] + 1;
                        sdItems++;

                    }
                }
                else {
                    System.out.printf("ERROR: RANGE VIOLATION - Range values not set\n");
                }
                break;
            }
            default:{
                sdItems    = INVALID;
                sdcalcMethod = INVALID_CALC_METHOD;
                System.out.println("ERROR: Standard Deviation Calculation Method either UNIMPLEMENTED, or UNKNOWN");
                break;
            }
        }

    }

    public int getNumberOfDataItems(){
        return sdItems;
    }


    public double calcAverage(){

        double total = 0;

        switch (getCalcMethod()){
            case DISCRETE:{

                if (sdItems != INVALID){

                    for (int i = 0; i < sdItems; i++){
                        total = total +  Data[i];
                    }

                    sdAve = total / (double) getNumberOfDataItems();
                }
                else {
                    sdAve = INVALID;
                }

                break;
            }
            case FRQTABLE: {

                if (sdItems != INVALID){
                    if (getMax() > getMin()){

                        for (int i = getMin(); i <= getMax(); i++){
                            total = total + (i * Data[i]);
                        }

                        sdAve = total / (double) getNumberOfDataItems();

                    }
                    else {
                        sdMaxRange = INVALID_RANGE;
                        sdMinRange = INVALID_RANGE;
                        sdAve      = INVALID;
                    }
                }
                else {

                    sdAve = INVALID;
                }

                break;
            }

            case GROUPED:{
                double numofval = (getMax() - getMin()) + 1;
                double numingroup = (numofval) / getNumberOfGroups();
                double groupedtotal = 0;

                if (sdItems != INVALID) {
                    for (int i = getMin(); i < (getMax() +1); i += numingroup) {

                        for (int j = i; j < (numingroup + i); j++) {
                            groupedtotal += Data[j];
                        }
                        total = total + (groupedtotal * ((i + (i + (numingroup - 1))) /2));

                    }
                    sdAve = total /  sdItems;
                } else {
                    // Pre-Conditions have not been met
                    sdAve = INVALID;
                }

                break;

            }

            default:{
                sdAve = INVALID;
                sdcalcMethod = INVALID_CALC_METHOD;
                System.out.println("ERROR: Standard Deviation Calculation Method UNKNOWN");
                break;
            }
        }

        return sdAve;
    }

    public double calcVariance(){

        double total = 0;
        double frequency = 0;
        double difference = 0;
        double diffSquared = 0;

        switch (getCalcMethod()){
            case DISCRETE:{
                // Checks that data entry, and average have been done
                //
                if ((sdItems != INVALID) || (sdAve != INVALID)){

                    // Loop over all data and calculate variance
                    //
                    for (int i = 0; i < sdItems; i++){

                        difference = (Data[i] - sdAve);          // calculates the difference between value and mean
                        diffSquared = Math.pow(difference,2);    // squares the difference
                        total = total + diffSquared;             // adds square of difference into total
                    }

                    sdVar = total / (double) sdItems;            // divides total by the number of observations

                }
                else {
                    // Pre-Conditions have not been met
                    sdVar = INVALID;
                }

                break;
            }

            case FRQTABLE: {
                // Checks that data entry, and average have been done
                //
                if ((sdItems != INVALID) || (sdAve != INVALID)) {

                    // Loop over all data in the range to calculate variance
                    //
                    for (int i = getMin(); i < getMax(); i++){

                        frequency = Data[i];
                        difference = (i - sdAve);
                        diffSquared = Math.pow(difference,2);
                        total = total + (diffSquared * frequency);
                    }

                    sdVar = total / (double) sdItems;

                }
                else {
                    // Pre-Conditions have not been met
                    sdVar = INVALID;
                }
                break;
            }

            case GROUPED:{
                double numofval = (getMax() - getMin()) + 1;
                double numingroup = (numofval) / getNumberOfGroups();

                double n = 0;
               // double groupedtotal = 0;

                if (sdItems != INVALID) {
                    for (int i = getMin(); i < (getMax() +1); i += numingroup) {

                        for (int j = i; j < (numingroup + i); j++) {
                         //   groupedtotal += Data[j];
                            n += Data[j];
                        }
                        difference = (((i + (i + (numingroup - 1))) /2) - sdAve);
                        diffSquared = Math.pow(difference,2);
                        total = total + (diffSquared * frequency);
                       // groupedtotal = 0;
                    }
                    sdVar = total / n;
                } else {
                    // Pre-Conditions have not been met
                    sdVar = INVALID;
                }

                break;

            }

            default:{
                sdVar = INVALID;
                sdcalcMethod = INVALID_CALC_METHOD;
                System.out.println("ERROR: Standard Deviation Calculation Method UNKNOWN");
                break;
            }
        }

        return sdVar;
    }

    public double calcStandardDeviation(){

        if ((sdItems != INVALID) || (sdAve != INVALID) || (sdVar != INVALID)) {
            sdDev = Math.sqrt(sdVar);
        }
        else {
                    sdDev = INVALID;
        }

        return sdDev;
    }

} // end of class
